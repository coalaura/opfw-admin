<?php
// Auto generated by the build:migrations command

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateExplosionEventsTable extends Migration
{
	/**
	 * Run the migrations.
	 *
	 * @return void
	 */
	public function up()
	{
		// Make enums work pre laravel 10
		Schema::getConnection()->getDoctrineConnection()->getDatabasePlatform()->registerDoctrineTypeMapping("enum", "string");

		$tableExists = Schema::hasTable("explosion_events");

		$indexes = $tableExists ? $this->getIndexedColumns() : [];
		$columns = $tableExists ? $this->getColumns() : [];

		$func = $tableExists ? "table" : "create";

		Schema::$func("explosion_events", function (Blueprint $table) use ($columns, $indexes) {
			!in_array("id", $columns) && $table->integer("id")->autoIncrement(); // primary key
			!in_array("license_identifier", $columns) && $table->string("license_identifier", 50)->nullable();
			!in_array("timestamp", $columns) && $table->bigInteger("timestamp")->nullable();
			!in_array("distance", $columns) && $table->double("distance")->nullable();
			!in_array("world_pos_x", $columns) && $table->double("world_pos_x")->nullable();
			!in_array("world_pos_y", $columns) && $table->double("world_pos_y")->nullable();
			!in_array("world_pos_z", $columns) && $table->double("world_pos_z")->nullable();
			!in_array("net_identifier", $columns) && $table->integer("net_identifier")->nullable();
			!in_array("exploding_entity", $columns) && $table->integer("exploding_entity")->nullable();
			!in_array("owner_id", $columns) && $table->integer("owner_id")->nullable();
			!in_array("ignore_damage_entity", $columns) && $table->integer("ignore_damage_entity")->nullable();
			!in_array("explosion_type", $columns) && $table->integer("explosion_type")->nullable();
			!in_array("damage_scale", $columns) && $table->double("damage_scale")->nullable();
			!in_array("explosion_pos_x", $columns) && $table->double("explosion_pos_x")->nullable();
			!in_array("explosion_pos_y", $columns) && $table->double("explosion_pos_y")->nullable();
			!in_array("explosion_pos_z", $columns) && $table->double("explosion_pos_z")->nullable();
			!in_array("has_related_dummy", $columns) && $table->tinyInteger("has_related_dummy")->nullable();
			!in_array("activation_delay", $columns) && $table->integer("activation_delay")->nullable();
			!in_array("camera_shake", $columns) && $table->double("camera_shake")->nullable();
			!in_array("make_sound", $columns) && $table->tinyInteger("make_sound")->nullable();
			!in_array("no_damage", $columns) && $table->tinyInteger("no_damage")->nullable();
			!in_array("no_fx", $columns) && $table->tinyInteger("no_fx")->nullable();
			!in_array("in_air", $columns) && $table->tinyInteger("in_air")->nullable();
			!in_array("entity_exploded", $columns) && $table->tinyInteger("entity_exploded")->nullable();
			!in_array("should_attach", $columns) && $table->tinyInteger("should_attach")->nullable();
			!in_array("attach_entity", $columns) && $table->integer("attach_entity")->nullable();
			!in_array("direction_x", $columns) && $table->double("direction_x")->nullable();
			!in_array("direction_y", $columns) && $table->double("direction_y")->nullable();
			!in_array("direction_z", $columns) && $table->double("direction_z")->nullable();
			!in_array("attached_to_vehicle", $columns) && $table->tinyInteger("attached_to_vehicle")->nullable();
			!in_array("detonating_other_explosive", $columns) && $table->tinyInteger("detonating_other_explosive")->nullable();
			!in_array("weapon_hash", $columns) && $table->bigInteger("weapon_hash")->nullable();
			!in_array("interior_pos_x", $columns) && $table->double("interior_pos_x")->nullable();
			!in_array("interior_pos_y", $columns) && $table->double("interior_pos_y")->nullable();
			!in_array("interior_pos_z", $columns) && $table->double("interior_pos_z")->nullable();
			!in_array("has_projectile", $columns) && $table->tinyInteger("has_projectile")->nullable();
			!in_array("projectile_identifier", $columns) && $table->integer("projectile_identifier")->nullable();
			!in_array("other_projectile_owner_id", $columns) && $table->tinyInteger("other_projectile_owner_id")->nullable();

			!in_array("license_identifier", $indexes) && $table->index("license_identifier");
			!in_array("explosion_type", $indexes) && $table->index("explosion_type");
		});
	}

	/**
	 * Reverse the migrations.
	 *
	 * @return void
	 */
	public function down()
	{
		Schema::dropIfExists("explosion_events");
	}

	/**
	 * Get all columns.
	 *
	 * @return array
	 */
	private function getColumns(): array
	{
		$columns = Schema::getConnection()->select("SHOW COLUMNS FROM `explosion_events`");

		return array_map(function ($column) {
			return $column->Field;
		}, $columns);
	}

	/**
	 * Get all indexed columns.
	 *
	 * @return array
	 */
	private function getIndexedColumns(): array
	{
		$indexes = Schema::getConnection()->select("SHOW INDEXES FROM `explosion_events` WHERE Key_name != 'PRIMARY'");

		return array_map(function ($index) {
			return $index->Column_name;
		}, $indexes);
	}
}