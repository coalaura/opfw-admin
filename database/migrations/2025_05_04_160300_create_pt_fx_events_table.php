<?php
// Auto generated by the build:migrations command

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreatePtFxEventsTable extends Migration
{
	/**
	 * Run the migrations.
	 *
	 * @return void
	 */
	public function up()
	{
		// Make enums work pre laravel 10
		Schema::getConnection()->getDoctrineConnection()->getDatabasePlatform()->registerDoctrineTypeMapping("enum", "string");

		$tableExists = Schema::hasTable("pt_fx_events");

		$indexes = $tableExists ? $this->getIndexedColumns() : [];
		$columns = $tableExists ? $this->getColumns() : [];

		$func = $tableExists ? "table" : "create";

		Schema::$func("pt_fx_events", function (Blueprint $table) use ($columns, $indexes) {
			!in_array("id", $columns) && $table->integer("id")->autoIncrement(); // primary key
			!in_array("license_identifier", $columns) && $table->string("license_identifier", 50)->nullable();
			!in_array("timestamp", $columns) && $table->bigInteger("timestamp")->nullable();
			!in_array("effect_hash", $columns) && $table->bigInteger("effect_hash")->nullable();
			!in_array("asset_hash", $columns) && $table->bigInteger("asset_hash")->nullable();
			!in_array("pos_x", $columns) && $table->float("pos_x")->nullable();
			!in_array("pos_y", $columns) && $table->float("pos_y")->nullable();
			!in_array("pos_z", $columns) && $table->float("pos_z")->nullable();
			!in_array("offset_x", $columns) && $table->float("offset_x")->nullable();
			!in_array("offset_y", $columns) && $table->float("offset_y")->nullable();
			!in_array("offset_z", $columns) && $table->float("offset_z")->nullable();
			!in_array("rot_x", $columns) && $table->float("rot_x")->nullable();
			!in_array("rot_y", $columns) && $table->float("rot_y")->nullable();
			!in_array("rot_z", $columns) && $table->float("rot_z")->nullable();
			!in_array("scale", $columns) && $table->float("scale")->nullable();
			!in_array("axis_bitset", $columns) && $table->integer("axis_bitset")->nullable();
			!in_array("is_on_entity", $columns) && $table->tinyInteger("is_on_entity")->nullable();
			!in_array("entity_net_id", $columns) && $table->integer("entity_net_id")->nullable();
			!in_array("use_bone_index", $columns) && $table->tinyInteger("use_bone_index")->nullable();
			!in_array("bone_index", $columns) && $table->integer("bone_index")->nullable();
			!in_array("has_color", $columns) && $table->tinyInteger("has_color")->nullable();
			!in_array("r", $columns) && $table->integer("r")->nullable();
			!in_array("g", $columns) && $table->integer("g")->nullable();
			!in_array("b", $columns) && $table->integer("b")->nullable();
			!in_array("has_alpha", $columns) && $table->tinyInteger("has_alpha")->nullable();
			!in_array("alpha", $columns) && $table->float("alpha")->nullable();
		});
	}

	/**
	 * Reverse the migrations.
	 *
	 * @return void
	 */
	public function down()
	{
		Schema::dropIfExists("pt_fx_events");
	}

	/**
	 * Get all columns.
	 *
	 * @return array
	 */
	private function getColumns(): array
	{
		$columns = Schema::getConnection()->select("SHOW COLUMNS FROM `pt_fx_events`");

		return array_map(function ($column) {
			return $column->Field;
		}, $columns);
	}

	/**
	 * Get all indexed columns.
	 *
	 * @return array
	 */
	private function getIndexedColumns(): array
	{
		$indexes = Schema::getConnection()->select("SHOW INDEXES FROM `pt_fx_events` WHERE Key_name != 'PRIMARY'");

		return array_map(function ($index) {
			return $index->Column_name;
		}, $indexes);
	}
}