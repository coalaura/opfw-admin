<?php
// Auto generated by the build:migrations command

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateNetworkSyncedSceneEventsTable extends Migration
{
	/**
	 * Run the migrations.
	 *
	 * @return void
	 */
	public function up()
	{
		// Make enums work pre laravel 10
		Schema::getConnection()->getDoctrineConnection()->getDatabasePlatform()->registerDoctrineTypeMapping("enum", "string");

		$tableExists = Schema::hasTable("network_synced_scene_events");

		$indexes = $tableExists ? $this->getIndexedColumns() : [];
		$columns = $tableExists ? $this->getColumns() : [];

		$func = $tableExists ? "table" : "create";

		Schema::$func("network_synced_scene_events", function (Blueprint $table) use ($columns, $indexes) {
			!in_array("id", $columns) && $table->integer("id")->autoIncrement(); // primary key
			!in_array("license_identifier", $columns) && $table->string("license_identifier", 50)->nullable();
			!in_array("timestamp", $columns) && $table->bigInteger("timestamp")->nullable();
			!in_array("scene_id", $columns) && $table->integer("scene_id")->nullable();
			!in_array("start_time", $columns) && $table->bigInteger("start_time")->nullable();
			!in_array("is_active", $columns) && $table->tinyInteger("is_active")->nullable();
			!in_array("scene_pos_x", $columns) && $table->double("scene_pos_x")->nullable();
			!in_array("scene_pos_y", $columns) && $table->double("scene_pos_y")->nullable();
			!in_array("scene_pos_z", $columns) && $table->double("scene_pos_z")->nullable();
			!in_array("scene_rot_x", $columns) && $table->double("scene_rot_x")->nullable();
			!in_array("scene_rot_y", $columns) && $table->double("scene_rot_y")->nullable();
			!in_array("scene_rot_z", $columns) && $table->double("scene_rot_z")->nullable();
			!in_array("scene_rot_w", $columns) && $table->double("scene_rot_w")->nullable();
			!in_array("has_attach_entity", $columns) && $table->tinyInteger("has_attach_entity")->nullable();
			!in_array("attach_entity_id", $columns) && $table->integer("attach_entity_id")->nullable();
			!in_array("attach_entity_bone", $columns) && $table->integer("attach_entity_bone")->nullable();
			!in_array("phase_to_stop_scene", $columns) && $table->double("phase_to_stop_scene")->nullable();
			!in_array("rate", $columns) && $table->double("rate")->nullable();
			!in_array("hold_last_frame", $columns) && $table->tinyInteger("hold_last_frame")->nullable();
			!in_array("is_looped", $columns) && $table->tinyInteger("is_looped")->nullable();
			!in_array("phase", $columns) && $table->double("phase")->nullable();
			!in_array("camera_anim_hash", $columns) && $table->bigInteger("camera_anim_hash")->nullable();
			!in_array("anim_dict_hash", $columns) && $table->bigInteger("anim_dict_hash")->nullable();
			!in_array("ped_entities", $columns) && $table->longText("ped_entities")->nullable();
			!in_array("non_ped_entities", $columns) && $table->longText("non_ped_entities")->nullable();
			!in_array("map_entities", $columns) && $table->longText("map_entities")->nullable();
		});
	}

	/**
	 * Reverse the migrations.
	 *
	 * @return void
	 */
	public function down()
	{
		Schema::dropIfExists("network_synced_scene_events");
	}

	/**
	 * Get all columns.
	 *
	 * @return array
	 */
	private function getColumns(): array
	{
		$columns = Schema::getConnection()->select("SHOW COLUMNS FROM `network_synced_scene_events`");

		return array_map(function ($column) {
			return $column->Field;
		}, $columns);
	}

	/**
	 * Get all indexed columns.
	 *
	 * @return array
	 */
	private function getIndexedColumns(): array
	{
		$indexes = Schema::getConnection()->select("SHOW INDEXES FROM `network_synced_scene_events` WHERE Key_name != 'PRIMARY'");

		return array_map(function ($index) {
			return $index->Column_name;
		}, $indexes);
	}
}