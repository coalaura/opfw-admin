<?php
// Auto generated by the build:migrations command

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateProjectileEventsTable extends Migration
{
	/**
	 * Run the migrations.
	 *
	 * @return void
	 */
	public function up()
	{
		// Make enums work pre laravel 10
		Schema::getConnection()->getDoctrineConnection()->getDatabasePlatform()->registerDoctrineTypeMapping("enum", "string");

		$tableExists = Schema::hasTable("projectile_events");

		$indexes = $tableExists ? $this->getIndexedColumns() : [];
		$columns = $tableExists ? $this->getColumns() : [];

		$func = $tableExists ? "table" : "create";

		Schema::$func("projectile_events", function (Blueprint $table) use ($columns, $indexes) {
			!in_array("id", $columns) && $table->integer("id")->autoIncrement(); // primary key
			!in_array("license_identifier", $columns) && $table->string("license_identifier", 50)->nullable();
			!in_array("timestamp", $columns) && $table->bigInteger("timestamp")->nullable();
			!in_array("owner_id", $columns) && $table->integer("owner_id")->nullable();
			!in_array("projectile_hash", $columns) && $table->bigInteger("projectile_hash")->nullable();
			!in_array("weapon_hash", $columns) && $table->bigInteger("weapon_hash")->nullable();
			!in_array("initial_position_x", $columns) && $table->double("initial_position_x")->nullable();
			!in_array("initial_position_y", $columns) && $table->double("initial_position_y")->nullable();
			!in_array("initial_position_z", $columns) && $table->double("initial_position_z")->nullable();
			!in_array("target_entity", $columns) && $table->integer("target_entity")->nullable();
			!in_array("fire_position_x", $columns) && $table->double("fire_position_x")->nullable();
			!in_array("fire_position_y", $columns) && $table->double("fire_position_y")->nullable();
			!in_array("fire_position_z", $columns) && $table->double("fire_position_z")->nullable();
			!in_array("effect_group", $columns) && $table->integer("effect_group")->nullable();
			!in_array("tint_index", $columns) && $table->integer("tint_index")->nullable();
			!in_array("command_fire_single_bullet", $columns) && $table->tinyInteger("command_fire_single_bullet")->nullable();
			!in_array("vehicle_relative_offset", $columns) && $table->tinyInteger("vehicle_relative_offset")->nullable();
			!in_array("allow_damping", $columns) && $table->tinyInteger("allow_damping")->nullable();
			!in_array("has_valid_fake_sequence", $columns) && $table->tinyInteger("has_valid_fake_sequence")->nullable();
			!in_array("fake_sequence_id", $columns) && $table->integer("fake_sequence_id")->nullable();
			!in_array("vehicle_offset_x", $columns) && $table->double("vehicle_offset_x")->nullable();
			!in_array("vehicle_offset_y", $columns) && $table->double("vehicle_offset_y")->nullable();
			!in_array("vehicle_offset_z", $columns) && $table->double("vehicle_offset_z")->nullable();
			!in_array("coordinated_with_task", $columns) && $table->tinyInteger("coordinated_with_task")->nullable();
			!in_array("has_speed_override", $columns) && $table->tinyInteger("has_speed_override")->nullable();
			!in_array("launch_speed_override", $columns) && $table->double("launch_speed_override")->nullable();
			!in_array("task_sequence", $columns) && $table->bigInteger("task_sequence")->nullable();
			!in_array("was_locked_on", $columns) && $table->tinyInteger("was_locked_on")->nullable();
			!in_array("ignore_damage_entity", $columns) && $table->integer("ignore_damage_entity")->nullable();
			!in_array("no_collision_entity", $columns) && $table->integer("no_collision_entity")->nullable();
			!in_array("sync_orientation", $columns) && $table->tinyInteger("sync_orientation")->nullable();
			!in_array("net_identifier", $columns) && $table->integer("net_identifier")->nullable();

			!in_array("license_identifier", $indexes) && $table->index("license_identifier");
			!in_array("timestamp", $indexes) && $table->index("timestamp");
		});
	}

	/**
	 * Reverse the migrations.
	 *
	 * @return void
	 */
	public function down()
	{
		Schema::dropIfExists("projectile_events");
	}

	/**
	 * Get all columns.
	 *
	 * @return array
	 */
	private function getColumns(): array
	{
		$columns = Schema::getConnection()->select("SHOW COLUMNS FROM `projectile_events`");

		return array_map(function ($column) {
			return $column->Field;
		}, $columns);
	}

	/**
	 * Get all indexed columns.
	 *
	 * @return array
	 */
	private function getIndexedColumns(): array
	{
		$indexes = Schema::getConnection()->select("SHOW INDEXES FROM `projectile_events` WHERE Key_name != 'PRIMARY'");

		return array_map(function ($index) {
			return $index->Column_name;
		}, $indexes);
	}
}