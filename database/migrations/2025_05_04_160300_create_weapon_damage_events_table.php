<?php
// Auto generated by the build:migrations command

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateWeaponDamageEventsTable extends Migration
{
	/**
	 * Run the migrations.
	 *
	 * @return void
	 */
	public function up()
	{
		// Make enums work pre laravel 10
		Schema::getConnection()->getDoctrineConnection()->getDatabasePlatform()->registerDoctrineTypeMapping("enum", "string");

		$tableExists = Schema::hasTable("weapon_damage_events");

		$indexes = $tableExists ? $this->getIndexedColumns() : [];
		$columns = $tableExists ? $this->getColumns() : [];

		$func = $tableExists ? "table" : "create";

		Schema::$func("weapon_damage_events", function (Blueprint $table) use ($columns, $indexes) {
			!in_array("id", $columns) && $table->integer("id")->autoIncrement(); // primary key
			!in_array("license_identifier", $columns) && $table->string("license_identifier", 50)->nullable();
			!in_array("timestamp", $columns) && $table->bigInteger("timestamp")->nullable();
			!in_array("parent_type", $columns) && $table->string("parent_type", 20)->nullable();
			!in_array("hit_player", $columns) && $table->string("hit_player", 50)->nullable();
			!in_array("hit_health", $columns) && $table->integer("hit_health")->nullable();
			!in_array("hit_entity_type", $columns) && $table->integer("hit_entity_type")->nullable();
			!in_array("distance", $columns) && $table->double("distance")->nullable();
			!in_array("is_parent_self", $columns) && $table->tinyInteger("is_parent_self")->nullable();
			!in_array("bonus_damage", $columns) && $table->integer("bonus_damage")->nullable();
			!in_array("world_pos_x", $columns) && $table->double("world_pos_x")->nullable();
			!in_array("world_pos_y", $columns) && $table->double("world_pos_y")->nullable();
			!in_array("world_pos_z", $columns) && $table->double("world_pos_z")->nullable();
			!in_array("vehicle_id", $columns) && $table->integer("vehicle_id")->nullable();
			!in_array("damage_type", $columns) && $table->integer("damage_type")->nullable();
			!in_array("weapon_type", $columns) && $table->bigInteger("weapon_type")->nullable();
			!in_array("override_default_damage", $columns) && $table->tinyInteger("override_default_damage")->nullable();
			!in_array("hit_entity_weapon", $columns) && $table->tinyInteger("hit_entity_weapon")->nullable();
			!in_array("hit_weapon_ammo_attachment", $columns) && $table->tinyInteger("hit_weapon_ammo_attachment")->nullable();
			!in_array("silenced", $columns) && $table->tinyInteger("silenced")->nullable();
			!in_array("damage_flags", $columns) && $table->bigInteger("damage_flags")->nullable();
			!in_array("has_action_result", $columns) && $table->tinyInteger("has_action_result")->nullable();
			!in_array("action_result_name", $columns) && $table->bigInteger("action_result_name")->nullable();
			!in_array("action_result_id", $columns) && $table->integer("action_result_id")->nullable();
			!in_array("force_reaction_id", $columns) && $table->bigInteger("force_reaction_id")->nullable();
			!in_array("weapon_damage", $columns) && $table->bigInteger("weapon_damage")->nullable();
			!in_array("victim_player", $columns) && $table->tinyInteger("victim_player")->nullable();
			!in_array("local_pos_x", $columns) && $table->double("local_pos_x")->nullable();
			!in_array("local_pos_y", $columns) && $table->double("local_pos_y")->nullable();
			!in_array("local_pos_z", $columns) && $table->double("local_pos_z")->nullable();
			!in_array("damage_time", $columns) && $table->bigInteger("damage_time")->nullable();
			!in_array("will_kill", $columns) && $table->tinyInteger("will_kill")->nullable();
			!in_array("parent_global_id", $columns) && $table->integer("parent_global_id")->nullable();
			!in_array("hit_global_id", $columns) && $table->integer("hit_global_id")->nullable();
			!in_array("use_large_distance", $columns) && $table->tinyInteger("use_large_distance")->nullable();
			!in_array("player_distance", $columns) && $table->integer("player_distance")->nullable();
			!in_array("has_vehicle_data", $columns) && $table->tinyInteger("has_vehicle_data")->nullable();
			!in_array("tyre_index", $columns) && $table->integer("tyre_index")->nullable();
			!in_array("suspension_index", $columns) && $table->integer("suspension_index")->nullable();
			!in_array("hit_component", $columns) && $table->integer("hit_component")->nullable();
			!in_array("first_bullet", $columns) && $table->tinyInteger("first_bullet")->nullable();
			!in_array("has_impact_dir", $columns) && $table->tinyInteger("has_impact_dir")->nullable();
			!in_array("impact_dir_x", $columns) && $table->double("impact_dir_x")->nullable();
			!in_array("impact_dir_y", $columns) && $table->double("impact_dir_y")->nullable();
			!in_array("impact_dir_z", $columns) && $table->double("impact_dir_z")->nullable();
			!in_array("unk_f120", $columns) && $table->integer("unk_f120")->nullable();

			!in_array("license_identifier", $indexes) && $table->index("license_identifier");
			!in_array("timestamp", $indexes) && $table->index("timestamp");
			!in_array("hit_player", $indexes) && $table->index("hit_player");
			!in_array("hit_entity_type", $indexes) && $table->index("hit_entity_type");
			!in_array("distance", $indexes) && $table->index("distance");
			!in_array("vehicle_id", $indexes) && $table->index("vehicle_id");
			!in_array("is_parent_self", $indexes) && $table->index("is_parent_self");
			!in_array("weapon_type", $indexes) && $table->index("weapon_type");
			!in_array("hit_global_id", $indexes) && $table->index("hit_global_id");
		});
	}

	/**
	 * Reverse the migrations.
	 *
	 * @return void
	 */
	public function down()
	{
		Schema::dropIfExists("weapon_damage_events");
	}

	/**
	 * Get all columns.
	 *
	 * @return array
	 */
	private function getColumns(): array
	{
		$columns = Schema::getConnection()->select("SHOW COLUMNS FROM `weapon_damage_events`");

		return array_map(function ($column) {
			return $column->Field;
		}, $columns);
	}

	/**
	 * Get all indexed columns.
	 *
	 * @return array
	 */
	private function getIndexedColumns(): array
	{
		$indexes = Schema::getConnection()->select("SHOW INDEXES FROM `weapon_damage_events` WHERE Key_name != 'PRIMARY'");

		return array_map(function ($index) {
			return $index->Column_name;
		}, $indexes);
	}
}