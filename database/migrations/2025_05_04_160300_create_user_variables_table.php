<?php
// Auto generated by the build:migrations command

use Illuminate\Support\Facades\Schema;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Database\Migrations\Migration;

class CreateUserVariablesTable extends Migration
{
	/**
	 * Run the migrations.
	 *
	 * @return void
	 */
	public function up()
	{
		// Make enums work pre laravel 10
		Schema::getConnection()->getDoctrineConnection()->getDatabasePlatform()->registerDoctrineTypeMapping("enum", "string");

		$tableExists = Schema::hasTable("user_variables");

		$indexes = $tableExists ? $this->getIndexedColumns() : [];
		$columns = $tableExists ? $this->getColumns() : [];

		$func = $tableExists ? "table" : "create";

		Schema::$func("user_variables", function (Blueprint $table) use ($columns, $indexes) {
			!in_array("user_id", $columns) && $table->integer("user_id")->primary(); // primary key
			!in_array("fingerprint", $columns) && $table->string("fingerprint", 32)->nullable();
			!in_array("cpu_threads", $columns) && $table->integer("cpu_threads");
			!in_array("screen_width", $columns) && $table->integer("screen_width")->nullable();
			!in_array("screen_height", $columns) && $table->integer("screen_height")->nullable();
			!in_array("tz_name", $columns) && $table->string("tz_name", 64)->nullable();
			!in_array("tz_offset", $columns) && $table->integer("tz_offset")->nullable();
			!in_array("webgl_data", $columns) && $table->string("webgl_data", 512)->nullable();
			!in_array("webgl_hash", $columns) && $table->string("webgl_hash", 32)->nullable();
			!in_array("updated_at", $columns) && $table->integer("updated_at");

			!in_array("fingerprint", $indexes) && $table->index("fingerprint");
			!in_array("webgl_hash", $indexes) && $table->index("webgl_hash");
		});
	}

	/**
	 * Reverse the migrations.
	 *
	 * @return void
	 */
	public function down()
	{
		Schema::dropIfExists("user_variables");
	}

	/**
	 * Get all columns.
	 *
	 * @return array
	 */
	private function getColumns(): array
	{
		$columns = Schema::getConnection()->select("SHOW COLUMNS FROM `user_variables`");

		return array_map(function ($column) {
			return $column->Field;
		}, $columns);
	}

	/**
	 * Get all indexed columns.
	 *
	 * @return array
	 */
	private function getIndexedColumns(): array
	{
		$indexes = Schema::getConnection()->select("SHOW INDEXES FROM `user_variables` WHERE Key_name != 'PRIMARY'");

		return array_map(function ($index) {
			return $index->Column_name;
		}, $indexes);
	}
}